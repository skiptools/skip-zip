// Copyright 2023 Skip
//
// This is free software: you can redistribute and/or modify it
// under the terms of the GNU Lesser General Public License 3.0
// as published by the Free Software Foundation https://fsf.org
import XCTest
import OSLog
import Foundation
import SkipZip

let logger: Logger = Logger(subsystem: "SkipZip", category: "Tests")

@available(macOS 13, macCatalyst 16, iOS 16, tvOS 16, watchOS 8, *)
final class SkipZipTests: XCTestCase {
    func testSkipZip() throws {
        logger.log("running test")
        let bytes = [0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04].map({ UInt8($0) })
        let data: Data = Data(bytes)

        // check the behavior of various zip compression levels
        XCTAssertEqual("Y2RiZmHEgSEyxJC4TMAnToy5uN0GMhkA", try data.deflate(level: 1).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgSEyxJC4TMAnToy5uN0GMhkA", try data.deflate(level: 2).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgSEyxJC4TMAnToy5uN0GMhkA", try data.deflate(level: 3).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgYknycHEk7gwAA==", try data.deflate(level: 4).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgYknycHEk7gwAA==", try data.deflate(level: 5).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgYknycGUmw4A", try data.deflate(level: 6).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgYknycGUmw4A", try data.deflate(level: 7).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgYknycGUmw4A", try data.deflate(level: 8).data.base64EncodedString())
        XCTAssertEqual("Y2RiZmHEgYknycGUmw4A", try data.deflate(level: 9).data.base64EncodedString())
    }
}
